// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  firstName     String         @db.VarChar(255)
  lastName      String         @db.VarChar(255)
  email         String         @unique
  emailVerified Boolean        @default(false)
  password      String
  picture       String?        @db.VarChar(512)
  dateCreated   DateTime       @default(now())
  lastLogin     DateTime?      @default(now())
  delivering    Boolean        @default(false)
  profile       Profile?
  orders        Order[]
  deliveries    Delivery[]
  university    University?    @relation(fields: [universityId], references: [id])
  universityId  Int?
  convoUserOnes Conversation[] @relation("convoUserOne")
  convoUserTwos Conversation[] @relation("convoUserTwo")
  Conversation  Conversation[]
  Message       Message[]
}

model Profile {
  id                     Int  @id @default(autoincrement())
  completedDeliveryCount Int  @default(0)
  completedOrderCount    Int  @default(0)
  user                   User @relation(fields: [userId], references: [id])
  userId                 Int  @unique
}

// DELIVERY/ORDER TABLES

model University {
  id          Int     @id @default(autoincrement())
  emailEnding String?
  fullName    String?
  place       Place   @relation(fields: [placeId], references: [id])
  placeId     Int
  students    User[]
}

model Order {
  id                      Int              @id @default(autoincrement())
  orderStatus             Status           @default(placed)
  user                    User             @relation(fields: [userId], references: [id])
  userId                  Int
  resturant               Resturant        @relation(fields: [resturantPlaceId], references: [placeId])
  deliveryBuilding        DeliveryBuilding @relation(fields: [deliveryBuildingPlaceId], references: [placeId])
  resturantPlaceId        Int
  deliveryBuildingPlaceId Int
  dateCreated             DateTime         @default(now())
}

model Delivery {
  id                      Int              @id @default(autoincrement())
  orderStatus             Status           @default(placed)
  user                    User             @relation(fields: [userId], references: [id])
  userId                  Int
  resturant               Resturant        @relation(fields: [resturantPlaceId], references: [placeId])
  deliveryBuilding        DeliveryBuilding @relation(fields: [deliveryBuildingPlaceId], references: [placeId])
  resturantPlaceId        Int
  deliveryBuildingPlaceId Int
  dateCreated             DateTime         @default(now())
}

model Resturant {
  place    Place      @relation(fields: [placeId], references: [id])
  placeId  Int        @unique
  Order    Order[]
  Delivery Delivery[]
}

model DeliveryBuilding {
  orders     Order[]
  deliveries Delivery[]
  place      Place      @relation(fields: [placeId], references: [id])
  placeId    Int        @unique
}

model Place {
  id               Int                @id @default(autoincrement())
  name             String
  fullAddress      String             @db.VarChar(255)
  state            String             @db.VarChar(255)
  city             String             @db.VarChar(255)
  zipcode          Int
  googlePlaceId    String             @unique
  University       University[]
  Resturant        Resturant[]
  DeliveryBuilding DeliveryBuilding[]
}

// CHAT/MESSAGING TABLES
model Conversation {
  id             Int       @id @default(autoincrement())
  convoUserOne   User?     @relation("convoUserOne", fields: [convoUserOneId], references: [id])
  convoUserOneId Int?
  convoUserTwo   User?     @relation("convoUserTwo", fields: [convoUserTwoId], references: [id])
  convoUserTwoId Int?
  User           User?     @relation(fields: [userId], references: [id])
  userId         Int?
  messages       Message[]
}

model Message {
  id       Int          @id @default(autoincrement())
  convo    Conversation @relation(fields: [convo_id], references: [id])
  convo_id Int
  author   User         @relation(fields: [userId], references: [id])
  userId   Int
  content  String
  sentAt   DateTime     @default(now())
}

enum Status {
  placed
  matched
  complete
  cancelled
}
